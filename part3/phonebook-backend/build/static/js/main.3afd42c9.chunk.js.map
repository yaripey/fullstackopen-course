{"version":3,"sources":["components/SearchFilter.js","components/NewContactForm.js","components/Person.js","components/Contacts.js","services/contacts.js","components/Notification.js","App.js","index.js"],"names":["SearchFilter","currentSearch","searchChange","value","onChange","NewContactForm","newNameHandler","newName","nameChange","newNumber","numberChange","onSubmit","type","Person","person","deleteContact","name","number","className","id","onClick","Contacts","namesToShow","map","key","baseUrl","axios","get","then","response","data","newObject","post","put","delete","Notification","message","App","useState","persons","setPersons","setNewName","setNewNumber","setSearch","notification","setNotification","useEffect","contactService","initialContacts","filter","contact","toLowerCase","indexOf","console","log","event","target","preventDefault","find","n","undefined","window","confirm","changedPerson","returnedPerson","catch","error","setTimeout","nameObject","length","returnedContact","concat","targetId","parseInt","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3afd42c9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst SearchFilter = ({ currentSearch, searchChange }) => {\r\n\r\n    return (\r\n        <div>\r\n            filter shown with <input value={currentSearch} onChange={searchChange} />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default SearchFilter","import React from 'react'\r\n\r\n\r\nconst NewContactForm = ({ newNameHandler, newName, nameChange, newNumber, numberChange }) => {\r\n\r\n    return (\r\n        <form onSubmit={newNameHandler}>\r\n            <div>\r\n                name: <input value={newName} onChange={nameChange} />\r\n            </div>\r\n            <div>\r\n                number: <input value={newNumber} onChange={numberChange} />\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default NewContactForm","import React from 'react'\r\n\r\nconst Person = ({ person, deleteContact }) => {\r\n    return (\r\n        <li>{person.name} {person.number} <button className={person.id} onClick={deleteContact}>Delete</button></li>\r\n    )\r\n}\r\n\r\n\r\nexport default Person","import React from 'react'\r\nimport Person from './Person'\r\n\r\nconst Contacts = ({ namesToShow, deleteContact }) => {\r\n\r\n\r\n    return (\r\n        <ul>\r\n            {namesToShow.map((person) =>\r\n                <Person deleteContact={deleteContact} person={person} key={person.id} />\r\n            )}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Contacts","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst deleteContact = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, deleteContact }","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport SearchFilter from './components/SearchFilter'\nimport NewContactForm from './components/NewContactForm'\nimport Contacts from './components/Contacts'\nimport contactService from './services/contacts'\nimport Notification from './components/Notification'\n\nconst App = () => {\n    const [persons, setPersons] = useState([])\n    const [newName, setNewName] = useState('')\n    const [newNumber, setNewNumber] = useState('')\n    const [currentSearch, setSearch] = useState('')\n    const [notification, setNotification] = useState(null)\n\n    useEffect(() => {\n        contactService\n            .getAll()\n            .then(initialContacts => {\n                setPersons(initialContacts)\n            })\n    }, [])\n\n    let namesToShow = []\n    if (currentSearch === \"\") {\n        namesToShow = persons\n    } else {\n        namesToShow = persons.filter(contact => (contact.name.toLowerCase().indexOf(currentSearch.toLowerCase()) !== -1))\n        console.log(namesToShow)\n    }\n\n    const newNameHandler = (event) => {\n        event.preventDefault()\n        const person = persons.find(n => n.name === newName)\n        if (person !== undefined) {\n            if (window.confirm(person.name + ' is already added to phonebook, replace the old number with a new one?')) {\n                const changedPerson = { ...person, number: newNumber }\n                contactService\n                    .update(changedPerson.id, changedPerson)\n                    .then(returnedPerson => {\n                        setPersons(persons.map(person => person.id !== changedPerson.id ? person : changedPerson))\n                    })\n                    .catch(error => {\n                        setNotification('This user was already removed from server')\n                        setTimeout(() => setNotification(null), 5000)\n                        setPersons(persons.filter(n => n.id !== changedPerson.id))\n                    })\n            }\n        } else {\n            const nameObject = {\n                name: newName,\n                number: newNumber,\n                id: persons.length + 1,\n            }\n\n            contactService\n                .create(nameObject)\n                .then(returnedContact => {\n                    setPersons(persons.concat(returnedContact))\n                    setNewName('')\n                    setNewNumber('')\n                })\n            setNotification('New user added')\n            setTimeout(() => setNotification(null), 5000)\n        }\n    }\n\n    const nameChange = (event) => {\n        setNewName(event.target.value)\n    }\n\n    const numberChange = (event) => {\n        setNewNumber(event.target.value)\n    }\n\n    const searchChange = (event) => {\n        setSearch(event.target.value)\n    }\n\n    const deleteContact = (event) => {\n        if (window.confirm('Delete this user?')) {\n            const targetId = parseInt(event.target.className)\n            contactService\n                .deleteContact(targetId)\n                .then(data => {\n                    setPersons(persons.filter(person => person.id !== targetId))\n                })\n        }\n    }\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n            <Notification message={notification} />\n            <SearchFilter currentSearch={currentSearch} searchChange={searchChange} />\n            <h2>add a new</h2>\n            <NewContactForm newNameHandler={newNameHandler} newName={newName} nameChange={nameChange} newNumber={newNumber} numberChange={numberChange} />\n            <h2>Numbers</h2>\n            <Contacts namesToShow={namesToShow} deleteContact={deleteContact} />\n        </div>\n    )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}